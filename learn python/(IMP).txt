When you write mystuff.append('hello') you are actually setting off a chain of events inside Python
to cause something to happen to the mystuff list. Here’s how it works:
1. Python sees you mentioned mystuff and looks up that variable. It might have to look backward
to see if you created it with =, if it is a function argument, or if it’s a global variable. Either way it
has to find the mystuff first.
2. Once it finds mystuff it reads the . (period) operator and starts to look at variables that are a
part of mystuff. Since mystuff is a list, it knows that mystuff has a bunch of functions.
3. It then hits append and compares the name to all the names that mystuff says it owns. If append
is in there (it is), then Python grabs that to use.
4. Next Python sees the ( (parenthesis) and realizes, ”Oh hey, this should be a function.” At this
point it calls (runs, executes) the function just like normally, but instead it calls the function with
an extra argument.
5. That extra argument is ... mystuff! I know, weird, right? But that’s how Python works, so it’s
best to just remember it and assume that’s the result. What happens, at the end of all this, is
a function call that looks like: append(mystuff, 'hello') instead of what you read, which is
mystuff.append('hello').
For the most part you do not have to know that this is going on, but it helps when you get error messages
from Python like this:
$ python3 . 6
>>> c l a s s Thing ( o b j e c t ) :
. . . def t e s t ( message ) :
. . . p r i n t ( message )
. . .
>>> a = Thing ( )
>>> a . t e s t ( ” h e l l o ” )
Traceback ( most recent c a l l l a s t ) :
DOING THINGS TO LISTS 169
F i l e ”< s t d i n >” , l i n e 1 , i n <module>
TypeError : t e s t ( ) takes e x a c t l y 1 argument ( 2 given )
>>>
What was all that? Well, this is me typing into the Python shell and showing you some magic. You
haven’t seen class yet, but we’ll get into that later. For now you see how Python said test() takes
exactly 1 argument (2 given). If you see this, it means that Python changed a.test("hello") to
test(a, "hello") and that somewhere someone messed up and didn’t add the argument for a.
This might be a lot to take in, but we’re going to spend a few exercises getting this concept firm in your
brain. To kick things off, here’s an exercise that mixes strings and lists for all kinds of fun.